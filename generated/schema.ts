// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Stat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("pricePTP", Value.fromBigInt(BigInt.zero()));
    this.set("pricexPTP", Value.fromBigInt(BigInt.zero()));
    this.set("priceVTX", Value.fromBigInt(BigInt.zero()));
    this.set("priceAVAX", Value.fromBigInt(BigInt.zero()));
    this.set("priceSAVAX", Value.fromBigInt(BigInt.zero()));
    this.set("priceJOE", Value.fromBigInt(BigInt.zero()));
    this.set("priceUSDC", Value.fromBigInt(BigInt.zero()));
    this.set("priceUSDT", Value.fromBigInt(BigInt.zero()));
    this.set("priceUST", Value.fromBigInt(BigInt.zero()));
    this.set("priceDAI", Value.fromBigInt(BigInt.zero()));
    this.set("priceMIM", Value.fromBigInt(BigInt.zero()));
    this.set("priceFRAX", Value.fromBigInt(BigInt.zero()));
    this.set("priceQI", Value.fromBigInt(BigInt.zero()));
    this.set("totalVePTP", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Stat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Stat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Stat", id.toString(), this);
    }
  }

  static load(id: string): Stat | null {
    return changetype<Stat | null>(store.get("Stat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get pricePTP(): BigInt {
    let value = this.get("pricePTP");
    return value!.toBigInt();
  }

  set pricePTP(value: BigInt) {
    this.set("pricePTP", Value.fromBigInt(value));
  }

  get pricexPTP(): BigInt {
    let value = this.get("pricexPTP");
    return value!.toBigInt();
  }

  set pricexPTP(value: BigInt) {
    this.set("pricexPTP", Value.fromBigInt(value));
  }

  get priceVTX(): BigInt {
    let value = this.get("priceVTX");
    return value!.toBigInt();
  }

  set priceVTX(value: BigInt) {
    this.set("priceVTX", Value.fromBigInt(value));
  }

  get priceAVAX(): BigInt {
    let value = this.get("priceAVAX");
    return value!.toBigInt();
  }

  set priceAVAX(value: BigInt) {
    this.set("priceAVAX", Value.fromBigInt(value));
  }

  get priceSAVAX(): BigInt {
    let value = this.get("priceSAVAX");
    return value!.toBigInt();
  }

  set priceSAVAX(value: BigInt) {
    this.set("priceSAVAX", Value.fromBigInt(value));
  }

  get priceJOE(): BigInt {
    let value = this.get("priceJOE");
    return value!.toBigInt();
  }

  set priceJOE(value: BigInt) {
    this.set("priceJOE", Value.fromBigInt(value));
  }

  get priceUSDC(): BigInt {
    let value = this.get("priceUSDC");
    return value!.toBigInt();
  }

  set priceUSDC(value: BigInt) {
    this.set("priceUSDC", Value.fromBigInt(value));
  }

  get priceUSDT(): BigInt {
    let value = this.get("priceUSDT");
    return value!.toBigInt();
  }

  set priceUSDT(value: BigInt) {
    this.set("priceUSDT", Value.fromBigInt(value));
  }

  get priceUST(): BigInt {
    let value = this.get("priceUST");
    return value!.toBigInt();
  }

  set priceUST(value: BigInt) {
    this.set("priceUST", Value.fromBigInt(value));
  }

  get priceDAI(): BigInt {
    let value = this.get("priceDAI");
    return value!.toBigInt();
  }

  set priceDAI(value: BigInt) {
    this.set("priceDAI", Value.fromBigInt(value));
  }

  get priceMIM(): BigInt {
    let value = this.get("priceMIM");
    return value!.toBigInt();
  }

  set priceMIM(value: BigInt) {
    this.set("priceMIM", Value.fromBigInt(value));
  }

  get priceFRAX(): BigInt {
    let value = this.get("priceFRAX");
    return value!.toBigInt();
  }

  set priceFRAX(value: BigInt) {
    this.set("priceFRAX", Value.fromBigInt(value));
  }

  get priceQI(): BigInt {
    let value = this.get("priceQI");
    return value!.toBigInt();
  }

  set priceQI(value: BigInt) {
    this.set("priceQI", Value.fromBigInt(value));
  }

  get totalVePTP(): BigInt {
    let value = this.get("totalVePTP");
    return value!.toBigInt();
  }

  set totalVePTP(value: BigInt) {
    this.set("totalVePTP", Value.fromBigInt(value));
  }
}

export class TJPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("afternoon", Value.fromBigInt(BigInt.zero()));
    this.set("counter", Value.fromBigInt(BigInt.zero()));
    this.set("turnover", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TJPair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TJPair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TJPair", id.toString(), this);
    }
  }

  static load(id: string): TJPair | null {
    return changetype<TJPair | null>(store.get("TJPair", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get afternoon(): BigInt {
    let value = this.get("afternoon");
    return value!.toBigInt();
  }

  set afternoon(value: BigInt) {
    this.set("afternoon", Value.fromBigInt(value));
  }

  get counter(): BigInt {
    let value = this.get("counter");
    return value!.toBigInt();
  }

  set counter(value: BigInt) {
    this.set("counter", Value.fromBigInt(value));
  }

  get turnover(): BigInt {
    let value = this.get("turnover");
    return value!.toBigInt();
  }

  set turnover(value: BigInt) {
    this.set("turnover", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("tvl1", Value.fromBigInt(BigInt.zero()));
    this.set("tvl2", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr1", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr2", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr1", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr2", Value.fromBigInt(BigInt.zero()));
    this.set("xptpApr", Value.fromBigInt(BigInt.zero()));
    this.set("joeApr", Value.fromBigInt(BigInt.zero()));
    this.set("zjoeApr", Value.fromBigInt(BigInt.zero()));
    this.set("ustApr1", Value.fromBigInt(BigInt.zero()));
    this.set("ustApr2", Value.fromBigInt(BigInt.zero()));
    this.set("qiApr1", Value.fromBigInt(BigInt.zero()));
    this.set("qiApr2", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
    this.set("baseApr", Value.fromBigInt(BigInt.zero()));
    this.set("boostApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get tvl1(): BigInt {
    let value = this.get("tvl1");
    return value!.toBigInt();
  }

  set tvl1(value: BigInt) {
    this.set("tvl1", Value.fromBigInt(value));
  }

  get tvl2(): BigInt {
    let value = this.get("tvl2");
    return value!.toBigInt();
  }

  set tvl2(value: BigInt) {
    this.set("tvl2", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get vtxApr1(): BigInt {
    let value = this.get("vtxApr1");
    return value!.toBigInt();
  }

  set vtxApr1(value: BigInt) {
    this.set("vtxApr1", Value.fromBigInt(value));
  }

  get vtxApr2(): BigInt {
    let value = this.get("vtxApr2");
    return value!.toBigInt();
  }

  set vtxApr2(value: BigInt) {
    this.set("vtxApr2", Value.fromBigInt(value));
  }

  get ptpApr(): BigInt {
    let value = this.get("ptpApr");
    return value!.toBigInt();
  }

  set ptpApr(value: BigInt) {
    this.set("ptpApr", Value.fromBigInt(value));
  }

  get ptpApr1(): BigInt {
    let value = this.get("ptpApr1");
    return value!.toBigInt();
  }

  set ptpApr1(value: BigInt) {
    this.set("ptpApr1", Value.fromBigInt(value));
  }

  get ptpApr2(): BigInt {
    let value = this.get("ptpApr2");
    return value!.toBigInt();
  }

  set ptpApr2(value: BigInt) {
    this.set("ptpApr2", Value.fromBigInt(value));
  }

  get xptpApr(): BigInt {
    let value = this.get("xptpApr");
    return value!.toBigInt();
  }

  set xptpApr(value: BigInt) {
    this.set("xptpApr", Value.fromBigInt(value));
  }

  get joeApr(): BigInt {
    let value = this.get("joeApr");
    return value!.toBigInt();
  }

  set joeApr(value: BigInt) {
    this.set("joeApr", Value.fromBigInt(value));
  }

  get zjoeApr(): BigInt {
    let value = this.get("zjoeApr");
    return value!.toBigInt();
  }

  set zjoeApr(value: BigInt) {
    this.set("zjoeApr", Value.fromBigInt(value));
  }

  get ustApr1(): BigInt {
    let value = this.get("ustApr1");
    return value!.toBigInt();
  }

  set ustApr1(value: BigInt) {
    this.set("ustApr1", Value.fromBigInt(value));
  }

  get ustApr2(): BigInt {
    let value = this.get("ustApr2");
    return value!.toBigInt();
  }

  set ustApr2(value: BigInt) {
    this.set("ustApr2", Value.fromBigInt(value));
  }

  get qiApr1(): BigInt {
    let value = this.get("qiApr1");
    return value!.toBigInt();
  }

  set qiApr1(value: BigInt) {
    this.set("qiApr1", Value.fromBigInt(value));
  }

  get qiApr2(): BigInt {
    let value = this.get("qiApr2");
    return value!.toBigInt();
  }

  set qiApr2(value: BigInt) {
    this.set("qiApr2", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }

  get baseApr(): BigInt {
    let value = this.get("baseApr");
    return value!.toBigInt();
  }

  set baseApr(value: BigInt) {
    this.set("baseApr", Value.fromBigInt(value));
  }

  get boostApr(): BigInt {
    let value = this.get("boostApr");
    return value!.toBigInt();
  }

  set boostApr(value: BigInt) {
    this.set("boostApr", Value.fromBigInt(value));
  }
}
