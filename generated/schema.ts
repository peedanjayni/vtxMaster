// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AllPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("pricePTP", Value.fromBigInt(BigInt.zero()));
    this.set("pricexPTP", Value.fromBigInt(BigInt.zero()));
    this.set("priceVTX", Value.fromBigInt(BigInt.zero()));
    this.set("priceAVAX", Value.fromBigInt(BigInt.zero()));
    this.set("priceSAVAX", Value.fromBigInt(BigInt.zero()));
    this.set("priceJOE", Value.fromBigInt(BigInt.zero()));
    this.set("priceUSDC", Value.fromBigInt(BigInt.zero()));
    this.set("priceUSDT", Value.fromBigInt(BigInt.zero()));
    this.set("priceUST", Value.fromBigInt(BigInt.zero()));
    this.set("priceDAI", Value.fromBigInt(BigInt.zero()));
    this.set("priceMIM", Value.fromBigInt(BigInt.zero()));
    this.set("priceFRAX", Value.fromBigInt(BigInt.zero()));
    this.set("priceQI", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AllPrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AllPrice must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllPrice", id.toString(), this);
    }
  }

  static load(id: string): AllPrice | null {
    return changetype<AllPrice | null>(store.get("AllPrice", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get pricePTP(): BigInt {
    let value = this.get("pricePTP");
    return value!.toBigInt();
  }

  set pricePTP(value: BigInt) {
    this.set("pricePTP", Value.fromBigInt(value));
  }

  get pricexPTP(): BigInt {
    let value = this.get("pricexPTP");
    return value!.toBigInt();
  }

  set pricexPTP(value: BigInt) {
    this.set("pricexPTP", Value.fromBigInt(value));
  }

  get priceVTX(): BigInt {
    let value = this.get("priceVTX");
    return value!.toBigInt();
  }

  set priceVTX(value: BigInt) {
    this.set("priceVTX", Value.fromBigInt(value));
  }

  get priceAVAX(): BigInt {
    let value = this.get("priceAVAX");
    return value!.toBigInt();
  }

  set priceAVAX(value: BigInt) {
    this.set("priceAVAX", Value.fromBigInt(value));
  }

  get priceSAVAX(): BigInt {
    let value = this.get("priceSAVAX");
    return value!.toBigInt();
  }

  set priceSAVAX(value: BigInt) {
    this.set("priceSAVAX", Value.fromBigInt(value));
  }

  get priceJOE(): BigInt {
    let value = this.get("priceJOE");
    return value!.toBigInt();
  }

  set priceJOE(value: BigInt) {
    this.set("priceJOE", Value.fromBigInt(value));
  }

  get priceUSDC(): BigInt {
    let value = this.get("priceUSDC");
    return value!.toBigInt();
  }

  set priceUSDC(value: BigInt) {
    this.set("priceUSDC", Value.fromBigInt(value));
  }

  get priceUSDT(): BigInt {
    let value = this.get("priceUSDT");
    return value!.toBigInt();
  }

  set priceUSDT(value: BigInt) {
    this.set("priceUSDT", Value.fromBigInt(value));
  }

  get priceUST(): BigInt {
    let value = this.get("priceUST");
    return value!.toBigInt();
  }

  set priceUST(value: BigInt) {
    this.set("priceUST", Value.fromBigInt(value));
  }

  get priceDAI(): BigInt {
    let value = this.get("priceDAI");
    return value!.toBigInt();
  }

  set priceDAI(value: BigInt) {
    this.set("priceDAI", Value.fromBigInt(value));
  }

  get priceMIM(): BigInt {
    let value = this.get("priceMIM");
    return value!.toBigInt();
  }

  set priceMIM(value: BigInt) {
    this.set("priceMIM", Value.fromBigInt(value));
  }

  get priceFRAX(): BigInt {
    let value = this.get("priceFRAX");
    return value!.toBigInt();
  }

  set priceFRAX(value: BigInt) {
    this.set("priceFRAX", Value.fromBigInt(value));
  }

  get priceQI(): BigInt {
    let value = this.get("priceQI");
    return value!.toBigInt();
  }

  set priceQI(value: BigInt) {
    this.set("priceQI", Value.fromBigInt(value));
  }
}

export class PoolStakedVTX extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("xptpApr", Value.fromBigInt(BigInt.zero()));
    this.set("zjoeApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolStakedVTX entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolStakedVTX must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolStakedVTX", id.toString(), this);
    }
  }

  static load(id: string): PoolStakedVTX | null {
    return changetype<PoolStakedVTX | null>(store.get("PoolStakedVTX", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get xptpApr(): BigInt {
    let value = this.get("xptpApr");
    return value!.toBigInt();
  }

  set xptpApr(value: BigInt) {
    this.set("xptpApr", Value.fromBigInt(value));
  }

  get zjoeApr(): BigInt {
    let value = this.get("zjoeApr");
    return value!.toBigInt();
  }

  set zjoeApr(value: BigInt) {
    this.set("zjoeApr", Value.fromBigInt(value));
  }
}

export class PoolLockedVTX extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("xptpApr", Value.fromBigInt(BigInt.zero()));
    this.set("zjoeApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolLockedVTX entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolLockedVTX must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolLockedVTX", id.toString(), this);
    }
  }

  static load(id: string): PoolLockedVTX | null {
    return changetype<PoolLockedVTX | null>(store.get("PoolLockedVTX", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get xptpApr(): BigInt {
    let value = this.get("xptpApr");
    return value!.toBigInt();
  }

  set xptpApr(value: BigInt) {
    this.set("xptpApr", Value.fromBigInt(value));
  }

  get zjoeApr(): BigInt {
    let value = this.get("zjoeApr");
    return value!.toBigInt();
  }

  set zjoeApr(value: BigInt) {
    this.set("zjoeApr", Value.fromBigInt(value));
  }
}

export class PoolStakedPTP extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolStakedPTP entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolStakedPTP must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolStakedPTP", id.toString(), this);
    }
  }

  static load(id: string): PoolStakedPTP | null {
    return changetype<PoolStakedPTP | null>(store.get("PoolStakedPTP", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get ptpApr(): BigInt {
    let value = this.get("ptpApr");
    return value!.toBigInt();
  }

  set ptpApr(value: BigInt) {
    this.set("ptpApr", Value.fromBigInt(value));
  }
}

export class PoolStakedJOE extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("joeApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolStakedJOE entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolStakedJOE must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolStakedJOE", id.toString(), this);
    }
  }

  static load(id: string): PoolStakedJOE | null {
    return changetype<PoolStakedJOE | null>(store.get("PoolStakedJOE", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get joeApr(): BigInt {
    let value = this.get("joeApr");
    return value!.toBigInt();
  }

  set joeApr(value: BigInt) {
    this.set("joeApr", Value.fromBigInt(value));
  }
}

export class Pool2VTXAVAX extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool2VTXAVAX entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool2VTXAVAX must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pool2VTXAVAX", id.toString(), this);
    }
  }

  static load(id: string): Pool2VTXAVAX | null {
    return changetype<Pool2VTXAVAX | null>(store.get("Pool2VTXAVAX", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }
}

export class Pool2PTP extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool2PTP entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool2PTP must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pool2PTP", id.toString(), this);
    }
  }

  static load(id: string): Pool2PTP | null {
    return changetype<Pool2PTP | null>(store.get("Pool2PTP", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }
}

export class Pool2JOE extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool2JOE entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool2JOE must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pool2JOE", id.toString(), this);
    }
  }

  static load(id: string): Pool2JOE | null {
    return changetype<Pool2JOE | null>(store.get("Pool2JOE", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }
}

export class PoolMainDAIe extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolMainDAIe entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolMainDAIe must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolMainDAIe", id.toString(), this);
    }
  }

  static load(id: string): PoolMainDAIe | null {
    return changetype<PoolMainDAIe | null>(store.get("PoolMainDAIe", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get ptpApr(): BigInt {
    let value = this.get("ptpApr");
    return value!.toBigInt();
  }

  set ptpApr(value: BigInt) {
    this.set("ptpApr", Value.fromBigInt(value));
  }
}

export class PoolMainUSDC extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolMainUSDC entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolMainUSDC must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolMainUSDC", id.toString(), this);
    }
  }

  static load(id: string): PoolMainUSDC | null {
    return changetype<PoolMainUSDC | null>(store.get("PoolMainUSDC", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get ptpApr(): BigInt {
    let value = this.get("ptpApr");
    return value!.toBigInt();
  }

  set ptpApr(value: BigInt) {
    this.set("ptpApr", Value.fromBigInt(value));
  }
}

export class PoolMainUSDCe extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolMainUSDCe entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolMainUSDCe must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolMainUSDCe", id.toString(), this);
    }
  }

  static load(id: string): PoolMainUSDCe | null {
    return changetype<PoolMainUSDCe | null>(store.get("PoolMainUSDCe", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get ptpApr(): BigInt {
    let value = this.get("ptpApr");
    return value!.toBigInt();
  }

  set ptpApr(value: BigInt) {
    this.set("ptpApr", Value.fromBigInt(value));
  }
}

export class PoolMainUSDT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolMainUSDT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolMainUSDT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolMainUSDT", id.toString(), this);
    }
  }

  static load(id: string): PoolMainUSDT | null {
    return changetype<PoolMainUSDT | null>(store.get("PoolMainUSDT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get ptpApr(): BigInt {
    let value = this.get("ptpApr");
    return value!.toBigInt();
  }

  set ptpApr(value: BigInt) {
    this.set("ptpApr", Value.fromBigInt(value));
  }
}

export class PoolMainUSDTe extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolMainUSDTe entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolMainUSDTe must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolMainUSDTe", id.toString(), this);
    }
  }

  static load(id: string): PoolMainUSDTe | null {
    return changetype<PoolMainUSDTe | null>(store.get("PoolMainUSDTe", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get ptpApr(): BigInt {
    let value = this.get("ptpApr");
    return value!.toBigInt();
  }

  set ptpApr(value: BigInt) {
    this.set("ptpApr", Value.fromBigInt(value));
  }
}

export class PoolAltUSDCUST extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl1", Value.fromBigInt(BigInt.zero()));
    this.set("tvl2", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr1", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr1", Value.fromBigInt(BigInt.zero()));
    this.set("ustApr1", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr2", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr2", Value.fromBigInt(BigInt.zero()));
    this.set("ustApr2", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolAltUSDCUST entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolAltUSDCUST must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolAltUSDCUST", id.toString(), this);
    }
  }

  static load(id: string): PoolAltUSDCUST | null {
    return changetype<PoolAltUSDCUST | null>(store.get("PoolAltUSDCUST", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl1(): BigInt {
    let value = this.get("tvl1");
    return value!.toBigInt();
  }

  set tvl1(value: BigInt) {
    this.set("tvl1", Value.fromBigInt(value));
  }

  get tvl2(): BigInt {
    let value = this.get("tvl2");
    return value!.toBigInt();
  }

  set tvl2(value: BigInt) {
    this.set("tvl2", Value.fromBigInt(value));
  }

  get vtxApr1(): BigInt {
    let value = this.get("vtxApr1");
    return value!.toBigInt();
  }

  set vtxApr1(value: BigInt) {
    this.set("vtxApr1", Value.fromBigInt(value));
  }

  get ptpApr1(): BigInt {
    let value = this.get("ptpApr1");
    return value!.toBigInt();
  }

  set ptpApr1(value: BigInt) {
    this.set("ptpApr1", Value.fromBigInt(value));
  }

  get ustApr1(): BigInt {
    let value = this.get("ustApr1");
    return value!.toBigInt();
  }

  set ustApr1(value: BigInt) {
    this.set("ustApr1", Value.fromBigInt(value));
  }

  get vtxApr2(): BigInt {
    let value = this.get("vtxApr2");
    return value!.toBigInt();
  }

  set vtxApr2(value: BigInt) {
    this.set("vtxApr2", Value.fromBigInt(value));
  }

  get ptpApr2(): BigInt {
    let value = this.get("ptpApr2");
    return value!.toBigInt();
  }

  set ptpApr2(value: BigInt) {
    this.set("ptpApr2", Value.fromBigInt(value));
  }

  get ustApr2(): BigInt {
    let value = this.get("ustApr2");
    return value!.toBigInt();
  }

  set ustApr2(value: BigInt) {
    this.set("ustApr2", Value.fromBigInt(value));
  }
}

export class PoolAltUSDCMIM extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl1", Value.fromBigInt(BigInt.zero()));
    this.set("tvl2", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr1", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr1", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr2", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr2", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolAltUSDCMIM entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolAltUSDCMIM must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolAltUSDCMIM", id.toString(), this);
    }
  }

  static load(id: string): PoolAltUSDCMIM | null {
    return changetype<PoolAltUSDCMIM | null>(store.get("PoolAltUSDCMIM", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl1(): BigInt {
    let value = this.get("tvl1");
    return value!.toBigInt();
  }

  set tvl1(value: BigInt) {
    this.set("tvl1", Value.fromBigInt(value));
  }

  get tvl2(): BigInt {
    let value = this.get("tvl2");
    return value!.toBigInt();
  }

  set tvl2(value: BigInt) {
    this.set("tvl2", Value.fromBigInt(value));
  }

  get vtxApr1(): BigInt {
    let value = this.get("vtxApr1");
    return value!.toBigInt();
  }

  set vtxApr1(value: BigInt) {
    this.set("vtxApr1", Value.fromBigInt(value));
  }

  get ptpApr1(): BigInt {
    let value = this.get("ptpApr1");
    return value!.toBigInt();
  }

  set ptpApr1(value: BigInt) {
    this.set("ptpApr1", Value.fromBigInt(value));
  }

  get vtxApr2(): BigInt {
    let value = this.get("vtxApr2");
    return value!.toBigInt();
  }

  set vtxApr2(value: BigInt) {
    this.set("vtxApr2", Value.fromBigInt(value));
  }

  get ptpApr2(): BigInt {
    let value = this.get("ptpApr2");
    return value!.toBigInt();
  }

  set ptpApr2(value: BigInt) {
    this.set("ptpApr2", Value.fromBigInt(value));
  }
}

export class PoolAltUSDCFRAX extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl1", Value.fromBigInt(BigInt.zero()));
    this.set("tvl2", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr1", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr1", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr2", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr2", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolAltUSDCFRAX entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolAltUSDCFRAX must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolAltUSDCFRAX", id.toString(), this);
    }
  }

  static load(id: string): PoolAltUSDCFRAX | null {
    return changetype<PoolAltUSDCFRAX | null>(store.get("PoolAltUSDCFRAX", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl1(): BigInt {
    let value = this.get("tvl1");
    return value!.toBigInt();
  }

  set tvl1(value: BigInt) {
    this.set("tvl1", Value.fromBigInt(value));
  }

  get tvl2(): BigInt {
    let value = this.get("tvl2");
    return value!.toBigInt();
  }

  set tvl2(value: BigInt) {
    this.set("tvl2", Value.fromBigInt(value));
  }

  get vtxApr1(): BigInt {
    let value = this.get("vtxApr1");
    return value!.toBigInt();
  }

  set vtxApr1(value: BigInt) {
    this.set("vtxApr1", Value.fromBigInt(value));
  }

  get ptpApr1(): BigInt {
    let value = this.get("ptpApr1");
    return value!.toBigInt();
  }

  set ptpApr1(value: BigInt) {
    this.set("ptpApr1", Value.fromBigInt(value));
  }

  get vtxApr2(): BigInt {
    let value = this.get("vtxApr2");
    return value!.toBigInt();
  }

  set vtxApr2(value: BigInt) {
    this.set("vtxApr2", Value.fromBigInt(value));
  }

  get ptpApr2(): BigInt {
    let value = this.get("ptpApr2");
    return value!.toBigInt();
  }

  set ptpApr2(value: BigInt) {
    this.set("ptpApr2", Value.fromBigInt(value));
  }
}

export class PoolAlt2AVAX extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl1", Value.fromBigInt(BigInt.zero()));
    this.set("tvl2", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr1", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr1", Value.fromBigInt(BigInt.zero()));
    this.set("qiApr1", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr2", Value.fromBigInt(BigInt.zero()));
    this.set("ptpApr2", Value.fromBigInt(BigInt.zero()));
    this.set("qiApr2", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolAlt2AVAX entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolAlt2AVAX must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolAlt2AVAX", id.toString(), this);
    }
  }

  static load(id: string): PoolAlt2AVAX | null {
    return changetype<PoolAlt2AVAX | null>(store.get("PoolAlt2AVAX", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl1(): BigInt {
    let value = this.get("tvl1");
    return value!.toBigInt();
  }

  set tvl1(value: BigInt) {
    this.set("tvl1", Value.fromBigInt(value));
  }

  get tvl2(): BigInt {
    let value = this.get("tvl2");
    return value!.toBigInt();
  }

  set tvl2(value: BigInt) {
    this.set("tvl2", Value.fromBigInt(value));
  }

  get vtxApr1(): BigInt {
    let value = this.get("vtxApr1");
    return value!.toBigInt();
  }

  set vtxApr1(value: BigInt) {
    this.set("vtxApr1", Value.fromBigInt(value));
  }

  get ptpApr1(): BigInt {
    let value = this.get("ptpApr1");
    return value!.toBigInt();
  }

  set ptpApr1(value: BigInt) {
    this.set("ptpApr1", Value.fromBigInt(value));
  }

  get qiApr1(): BigInt {
    let value = this.get("qiApr1");
    return value!.toBigInt();
  }

  set qiApr1(value: BigInt) {
    this.set("qiApr1", Value.fromBigInt(value));
  }

  get vtxApr2(): BigInt {
    let value = this.get("vtxApr2");
    return value!.toBigInt();
  }

  set vtxApr2(value: BigInt) {
    this.set("vtxApr2", Value.fromBigInt(value));
  }

  get ptpApr2(): BigInt {
    let value = this.get("ptpApr2");
    return value!.toBigInt();
  }

  set ptpApr2(value: BigInt) {
    this.set("ptpApr2", Value.fromBigInt(value));
  }

  get qiApr2(): BigInt {
    let value = this.get("qiApr2");
    return value!.toBigInt();
  }

  set qiApr2(value: BigInt) {
    this.set("qiApr2", Value.fromBigInt(value));
  }
}

export class PoolBnbAVAX extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
    this.set("baseApr", Value.fromBigInt(BigInt.zero()));
    this.set("boostApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolBnbAVAX entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolBnbAVAX must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolBnbAVAX", id.toString(), this);
    }
  }

  static load(id: string): PoolBnbAVAX | null {
    return changetype<PoolBnbAVAX | null>(store.get("PoolBnbAVAX", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }

  get baseApr(): BigInt {
    let value = this.get("baseApr");
    return value!.toBigInt();
  }

  set baseApr(value: BigInt) {
    this.set("baseApr", Value.fromBigInt(value));
  }

  get boostApr(): BigInt {
    let value = this.get("boostApr");
    return value!.toBigInt();
  }

  set boostApr(value: BigInt) {
    this.set("boostApr", Value.fromBigInt(value));
  }
}

export class PoolJoeAVAX extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
    this.set("baseApr", Value.fromBigInt(BigInt.zero()));
    this.set("boostApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolJoeAVAX entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolJoeAVAX must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolJoeAVAX", id.toString(), this);
    }
  }

  static load(id: string): PoolJoeAVAX | null {
    return changetype<PoolJoeAVAX | null>(store.get("PoolJoeAVAX", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }

  get baseApr(): BigInt {
    let value = this.get("baseApr");
    return value!.toBigInt();
  }

  set baseApr(value: BigInt) {
    this.set("baseApr", Value.fromBigInt(value));
  }

  get boostApr(): BigInt {
    let value = this.get("boostApr");
    return value!.toBigInt();
  }

  set boostApr(value: BigInt) {
    this.set("boostApr", Value.fromBigInt(value));
  }
}

export class PoolJoeUSDC extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
    this.set("baseApr", Value.fromBigInt(BigInt.zero()));
    this.set("boostApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolJoeUSDC entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolJoeUSDC must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolJoeUSDC", id.toString(), this);
    }
  }

  static load(id: string): PoolJoeUSDC | null {
    return changetype<PoolJoeUSDC | null>(store.get("PoolJoeUSDC", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }

  get baseApr(): BigInt {
    let value = this.get("baseApr");
    return value!.toBigInt();
  }

  set baseApr(value: BigInt) {
    this.set("baseApr", Value.fromBigInt(value));
  }

  get boostApr(): BigInt {
    let value = this.get("boostApr");
    return value!.toBigInt();
  }

  set boostApr(value: BigInt) {
    this.set("boostApr", Value.fromBigInt(value));
  }
}

export class PoolLinkeAVAX extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
    this.set("baseApr", Value.fromBigInt(BigInt.zero()));
    this.set("boostApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolLinkeAVAX entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolLinkeAVAX must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolLinkeAVAX", id.toString(), this);
    }
  }

  static load(id: string): PoolLinkeAVAX | null {
    return changetype<PoolLinkeAVAX | null>(store.get("PoolLinkeAVAX", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }

  get baseApr(): BigInt {
    let value = this.get("baseApr");
    return value!.toBigInt();
  }

  set baseApr(value: BigInt) {
    this.set("baseApr", Value.fromBigInt(value));
  }

  get boostApr(): BigInt {
    let value = this.get("boostApr");
    return value!.toBigInt();
  }

  set boostApr(value: BigInt) {
    this.set("boostApr", Value.fromBigInt(value));
  }
}

export class PoolMimAVAX extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
    this.set("baseApr", Value.fromBigInt(BigInt.zero()));
    this.set("boostApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolMimAVAX entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolMimAVAX must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolMimAVAX", id.toString(), this);
    }
  }

  static load(id: string): PoolMimAVAX | null {
    return changetype<PoolMimAVAX | null>(store.get("PoolMimAVAX", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }

  get baseApr(): BigInt {
    let value = this.get("baseApr");
    return value!.toBigInt();
  }

  set baseApr(value: BigInt) {
    this.set("baseApr", Value.fromBigInt(value));
  }

  get boostApr(): BigInt {
    let value = this.get("boostApr");
    return value!.toBigInt();
  }

  set boostApr(value: BigInt) {
    this.set("boostApr", Value.fromBigInt(value));
  }
}

export class PoolUsdcAVAX extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
    this.set("baseApr", Value.fromBigInt(BigInt.zero()));
    this.set("boostApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolUsdcAVAX entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolUsdcAVAX must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolUsdcAVAX", id.toString(), this);
    }
  }

  static load(id: string): PoolUsdcAVAX | null {
    return changetype<PoolUsdcAVAX | null>(store.get("PoolUsdcAVAX", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }

  get baseApr(): BigInt {
    let value = this.get("baseApr");
    return value!.toBigInt();
  }

  set baseApr(value: BigInt) {
    this.set("baseApr", Value.fromBigInt(value));
  }

  get boostApr(): BigInt {
    let value = this.get("boostApr");
    return value!.toBigInt();
  }

  set boostApr(value: BigInt) {
    this.set("boostApr", Value.fromBigInt(value));
  }
}

export class PoolUsdceAVAX extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
    this.set("baseApr", Value.fromBigInt(BigInt.zero()));
    this.set("boostApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolUsdceAVAX entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolUsdceAVAX must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolUsdceAVAX", id.toString(), this);
    }
  }

  static load(id: string): PoolUsdceAVAX | null {
    return changetype<PoolUsdceAVAX | null>(store.get("PoolUsdceAVAX", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }

  get baseApr(): BigInt {
    let value = this.get("baseApr");
    return value!.toBigInt();
  }

  set baseApr(value: BigInt) {
    this.set("baseApr", Value.fromBigInt(value));
  }

  get boostApr(): BigInt {
    let value = this.get("boostApr");
    return value!.toBigInt();
  }

  set boostApr(value: BigInt) {
    this.set("boostApr", Value.fromBigInt(value));
  }
}

export class Pool2USDC extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
    this.set("baseApr", Value.fromBigInt(BigInt.zero()));
    this.set("boostApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool2USDC entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool2USDC must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pool2USDC", id.toString(), this);
    }
  }

  static load(id: string): Pool2USDC | null {
    return changetype<Pool2USDC | null>(store.get("Pool2USDC", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }

  get baseApr(): BigInt {
    let value = this.get("baseApr");
    return value!.toBigInt();
  }

  set baseApr(value: BigInt) {
    this.set("baseApr", Value.fromBigInt(value));
  }

  get boostApr(): BigInt {
    let value = this.get("boostApr");
    return value!.toBigInt();
  }

  set boostApr(value: BigInt) {
    this.set("boostApr", Value.fromBigInt(value));
  }
}

export class PoolUsdteAVAX extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
    this.set("baseApr", Value.fromBigInt(BigInt.zero()));
    this.set("boostApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolUsdteAVAX entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolUsdteAVAX must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolUsdteAVAX", id.toString(), this);
    }
  }

  static load(id: string): PoolUsdteAVAX | null {
    return changetype<PoolUsdteAVAX | null>(store.get("PoolUsdteAVAX", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }

  get baseApr(): BigInt {
    let value = this.get("baseApr");
    return value!.toBigInt();
  }

  set baseApr(value: BigInt) {
    this.set("baseApr", Value.fromBigInt(value));
  }

  get boostApr(): BigInt {
    let value = this.get("boostApr");
    return value!.toBigInt();
  }

  set boostApr(value: BigInt) {
    this.set("boostApr", Value.fromBigInt(value));
  }
}

export class PoolUsdtAVAX extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
    this.set("baseApr", Value.fromBigInt(BigInt.zero()));
    this.set("boostApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolUsdtAVAX entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolUsdtAVAX must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolUsdtAVAX", id.toString(), this);
    }
  }

  static load(id: string): PoolUsdtAVAX | null {
    return changetype<PoolUsdtAVAX | null>(store.get("PoolUsdtAVAX", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }

  get baseApr(): BigInt {
    let value = this.get("baseApr");
    return value!.toBigInt();
  }

  set baseApr(value: BigInt) {
    this.set("baseApr", Value.fromBigInt(value));
  }

  get boostApr(): BigInt {
    let value = this.get("boostApr");
    return value!.toBigInt();
  }

  set boostApr(value: BigInt) {
    this.set("boostApr", Value.fromBigInt(value));
  }
}

export class Pool2USDT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
    this.set("baseApr", Value.fromBigInt(BigInt.zero()));
    this.set("boostApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool2USDT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool2USDT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pool2USDT", id.toString(), this);
    }
  }

  static load(id: string): Pool2USDT | null {
    return changetype<Pool2USDT | null>(store.get("Pool2USDT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }

  get baseApr(): BigInt {
    let value = this.get("baseApr");
    return value!.toBigInt();
  }

  set baseApr(value: BigInt) {
    this.set("baseApr", Value.fromBigInt(value));
  }

  get boostApr(): BigInt {
    let value = this.get("boostApr");
    return value!.toBigInt();
  }

  set boostApr(value: BigInt) {
    this.set("boostApr", Value.fromBigInt(value));
  }
}

export class PoolWbtceAVAX extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
    this.set("baseApr", Value.fromBigInt(BigInt.zero()));
    this.set("boostApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolWbtceAVAX entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolWbtceAVAX must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolWbtceAVAX", id.toString(), this);
    }
  }

  static load(id: string): PoolWbtceAVAX | null {
    return changetype<PoolWbtceAVAX | null>(store.get("PoolWbtceAVAX", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }

  get baseApr(): BigInt {
    let value = this.get("baseApr");
    return value!.toBigInt();
  }

  set baseApr(value: BigInt) {
    this.set("baseApr", Value.fromBigInt(value));
  }

  get boostApr(): BigInt {
    let value = this.get("boostApr");
    return value!.toBigInt();
  }

  set boostApr(value: BigInt) {
    this.set("boostApr", Value.fromBigInt(value));
  }
}

export class PoolWetheAVAX extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("blockTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("tvl", Value.fromBigInt(BigInt.zero()));
    this.set("vtxApr", Value.fromBigInt(BigInt.zero()));
    this.set("lpApr", Value.fromBigInt(BigInt.zero()));
    this.set("baseApr", Value.fromBigInt(BigInt.zero()));
    this.set("boostApr", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolWetheAVAX entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolWetheAVAX must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolWetheAVAX", id.toString(), this);
    }
  }

  static load(id: string): PoolWetheAVAX | null {
    return changetype<PoolWetheAVAX | null>(store.get("PoolWetheAVAX", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    return value!.toBigInt();
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get vtxApr(): BigInt {
    let value = this.get("vtxApr");
    return value!.toBigInt();
  }

  set vtxApr(value: BigInt) {
    this.set("vtxApr", Value.fromBigInt(value));
  }

  get lpApr(): BigInt {
    let value = this.get("lpApr");
    return value!.toBigInt();
  }

  set lpApr(value: BigInt) {
    this.set("lpApr", Value.fromBigInt(value));
  }

  get baseApr(): BigInt {
    let value = this.get("baseApr");
    return value!.toBigInt();
  }

  set baseApr(value: BigInt) {
    this.set("baseApr", Value.fromBigInt(value));
  }

  get boostApr(): BigInt {
    let value = this.get("boostApr");
    return value!.toBigInt();
  }

  set boostApr(value: BigInt) {
    this.set("boostApr", Value.fromBigInt(value));
  }
}
