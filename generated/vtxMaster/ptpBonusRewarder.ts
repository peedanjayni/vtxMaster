// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OnReward extends ethereum.Event {
  get params(): OnReward__Params {
    return new OnReward__Params(this);
  }
}

export class OnReward__Params {
  _event: OnReward;

  constructor(event: OnReward) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RewardRateUpdated extends ethereum.Event {
  get params(): RewardRateUpdated__Params {
    return new RewardRateUpdated__Params(this);
  }
}

export class RewardRateUpdated__Params {
  _event: RewardRateUpdated;

  constructor(event: RewardRateUpdated) {
    this._event = event;
  }

  get oldRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ptpBonusRewarder__poolInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ptpBonusRewarder__updatePoolResultPoolStruct extends ethereum.Tuple {
  get accTokenPerShare(): BigInt {
    return this[0].toBigInt();
  }

  get lastRewardTimestamp(): BigInt {
    return this[1].toBigInt();
  }
}

export class ptpBonusRewarder__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ptpBonusRewarder extends ethereum.SmartContract {
  static bind(address: Address): ptpBonusRewarder {
    return new ptpBonusRewarder("ptpBonusRewarder", address);
  }

  MP(): Address {
    let result = super.call("MP", "MP():(address)", []);

    return result[0].toAddress();
  }

  try_MP(): ethereum.CallResult<Address> {
    let result = super.tryCall("MP", "MP():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balance(): BigInt {
    let result = super.call("balance", "balance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balance", "balance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isNative(): boolean {
    let result = super.call("isNative", "isNative():(bool)", []);

    return result[0].toBoolean();
  }

  try_isNative(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isNative", "isNative():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lpToken(): Address {
    let result = super.call("lpToken", "lpToken():(address)", []);

    return result[0].toAddress();
  }

  try_lpToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("lpToken", "lpToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onPtpReward(_user: Address, _lpAmount: BigInt): BigInt {
    let result = super.call(
      "onPtpReward",
      "onPtpReward(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_lpAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_onPtpReward(
    _user: Address,
    _lpAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "onPtpReward",
      "onPtpReward(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_lpAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingTokens(_user: Address): BigInt {
    let result = super.call(
      "pendingTokens",
      "pendingTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_pendingTokens(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingTokens",
      "pendingTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolInfo(): ptpBonusRewarder__poolInfoResult {
    let result = super.call("poolInfo", "poolInfo():(uint256,uint256)", []);

    return new ptpBonusRewarder__poolInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_poolInfo(): ethereum.CallResult<ptpBonusRewarder__poolInfoResult> {
    let result = super.tryCall("poolInfo", "poolInfo():(uint256,uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ptpBonusRewarder__poolInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenPerSec(): BigInt {
    let result = super.call("tokenPerSec", "tokenPerSec():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenPerSec(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenPerSec", "tokenPerSec():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updatePool(): ptpBonusRewarder__updatePoolResultPoolStruct {
    let result = super.call(
      "updatePool",
      "updatePool():((uint256,uint256))",
      []
    );

    return changetype<ptpBonusRewarder__updatePoolResultPoolStruct>(
      result[0].toTuple()
    );
  }

  try_updatePool(): ethereum.CallResult<
    ptpBonusRewarder__updatePoolResultPoolStruct
  > {
    let result = super.tryCall(
      "updatePool",
      "updatePool():((uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ptpBonusRewarder__updatePoolResultPoolStruct>(
        value[0].toTuple()
      )
    );
  }

  userInfo(param0: Address): ptpBonusRewarder__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new ptpBonusRewarder__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_userInfo(
    param0: Address
  ): ethereum.CallResult<ptpBonusRewarder__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ptpBonusRewarder__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _lpToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenPerSec(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _MP(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _isNative(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class OnPtpRewardCall extends ethereum.Call {
  get inputs(): OnPtpRewardCall__Inputs {
    return new OnPtpRewardCall__Inputs(this);
  }

  get outputs(): OnPtpRewardCall__Outputs {
    return new OnPtpRewardCall__Outputs(this);
  }
}

export class OnPtpRewardCall__Inputs {
  _call: OnPtpRewardCall;

  constructor(call: OnPtpRewardCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _lpAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OnPtpRewardCall__Outputs {
  _call: OnPtpRewardCall;

  constructor(call: OnPtpRewardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetRewardRateCall extends ethereum.Call {
  get inputs(): SetRewardRateCall__Inputs {
    return new SetRewardRateCall__Inputs(this);
  }

  get outputs(): SetRewardRateCall__Outputs {
    return new SetRewardRateCall__Outputs(this);
  }
}

export class SetRewardRateCall__Inputs {
  _call: SetRewardRateCall;

  constructor(call: SetRewardRateCall) {
    this._call = call;
  }

  get _tokenPerSec(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRewardRateCall__Outputs {
  _call: SetRewardRateCall;

  constructor(call: SetRewardRateCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get pool(): UpdatePoolCallPoolStruct {
    return changetype<UpdatePoolCallPoolStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class UpdatePoolCallPoolStruct extends ethereum.Tuple {
  get accTokenPerShare(): BigInt {
    return this[0].toBigInt();
  }

  get lastRewardTimestamp(): BigInt {
    return this[1].toBigInt();
  }
}
