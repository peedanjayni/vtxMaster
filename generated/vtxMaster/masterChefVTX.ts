// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Add extends ethereum.Event {
  get params(): Add__Params {
    return new Add__Params(this);
  }
}

export class Add__Params {
  _event: Add;

  constructor(event: Add) {
    this._event = event;
  }

  get allocPoint(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lpToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rewarder(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lpToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lpToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lpToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Locked extends ethereum.Event {
  get params(): Locked__Params {
    return new Locked__Params(this);
  }
}

export class Locked__Params {
  _event: Locked;

  constructor(event: Locked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lpToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Set extends ethereum.Event {
  get params(): Set__Params {
    return new Set__Params(this);
  }
}

export class Set__Params {
  _event: Set;

  constructor(event: Set) {
    this._event = event;
  }

  get lpToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get allocPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewarder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get locker(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get overwrite(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class Unlocked extends ethereum.Event {
  get params(): Unlocked__Params {
    return new Unlocked__Params(this);
  }
}

export class Unlocked__Params {
  _event: Unlocked;

  constructor(event: Unlocked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lpToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateEmissionRate extends ethereum.Event {
  get params(): UpdateEmissionRate__Params {
    return new UpdateEmissionRate__Params(this);
  }
}

export class UpdateEmissionRate__Params {
  _event: UpdateEmissionRate;

  constructor(event: UpdateEmissionRate) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _vtxPerSec(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdatePool extends ethereum.Event {
  get params(): UpdatePool__Params {
    return new UpdatePool__Params(this);
  }
}

export class UpdatePool__Params {
  _event: UpdatePool;

  constructor(event: UpdatePool) {
    this._event = event;
  }

  get lpToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lastRewardTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lpSupply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get accVTXPerShare(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lpToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class masterChefVTX__addressToPoolInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: Address;
  value6: Address;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: Address,
    value6: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    return map;
  }
}

export class masterChefVTX__getPoolInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class masterChefVTX__pendingTokensResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: BigInt;

  constructor(value0: BigInt, value1: Address, value2: string, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class masterChefVTX extends ethereum.SmartContract {
  static bind(address: Address): masterChefVTX {
    return new masterChefVTX("masterChefVTX", address);
  }

  PoolManagers(param0: Address): boolean {
    let result = super.call("PoolManagers", "PoolManagers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_PoolManagers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("PoolManagers", "PoolManagers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  addressToPoolInfo(param0: Address): masterChefVTX__addressToPoolInfoResult {
    let result = super.call(
      "addressToPoolInfo",
      "addressToPoolInfo(address):(address,uint256,uint256,uint256,address,address,address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new masterChefVTX__addressToPoolInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toAddress()
    );
  }

  try_addressToPoolInfo(
    param0: Address
  ): ethereum.CallResult<masterChefVTX__addressToPoolInfoResult> {
    let result = super.tryCall(
      "addressToPoolInfo",
      "addressToPoolInfo(address):(address,uint256,uint256,uint256,address,address,address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new masterChefVTX__addressToPoolInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toAddress()
      )
    );
  }

  createRewarder(_lpToken: Address, mainRewardToken: Address): Address {
    let result = super.call(
      "createRewarder",
      "createRewarder(address,address):(address)",
      [
        ethereum.Value.fromAddress(_lpToken),
        ethereum.Value.fromAddress(mainRewardToken)
      ]
    );

    return result[0].toAddress();
  }

  try_createRewarder(
    _lpToken: Address,
    mainRewardToken: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createRewarder",
      "createRewarder(address,address):(address)",
      [
        ethereum.Value.fromAddress(_lpToken),
        ethereum.Value.fromAddress(mainRewardToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositInfo(_lp: Address, _user: Address): BigInt {
    let result = super.call(
      "depositInfo",
      "depositInfo(address,address):(uint256)",
      [ethereum.Value.fromAddress(_lp), ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_depositInfo(_lp: Address, _user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositInfo",
      "depositInfo(address,address):(uint256)",
      [ethereum.Value.fromAddress(_lp), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolInfo(token: Address): masterChefVTX__getPoolInfoResult {
    let result = super.call(
      "getPoolInfo",
      "getPoolInfo(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return new masterChefVTX__getPoolInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getPoolInfo(
    token: Address
  ): ethereum.CallResult<masterChefVTX__getPoolInfoResult> {
    let result = super.tryCall(
      "getPoolInfo",
      "getPoolInfo(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new masterChefVTX__getPoolInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingTokens(
    _lp: Address,
    _user: Address,
    token: Address
  ): masterChefVTX__pendingTokensResult {
    let result = super.call(
      "pendingTokens",
      "pendingTokens(address,address,address):(uint256,address,string,uint256)",
      [
        ethereum.Value.fromAddress(_lp),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromAddress(token)
      ]
    );

    return new masterChefVTX__pendingTokensResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBigInt()
    );
  }

  try_pendingTokens(
    _lp: Address,
    _user: Address,
    token: Address
  ): ethereum.CallResult<masterChefVTX__pendingTokensResult> {
    let result = super.tryCall(
      "pendingTokens",
      "pendingTokens(address,address,address):(uint256,address,string,uint256)",
      [
        ethereum.Value.fromAddress(_lp),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromAddress(token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new masterChefVTX__pendingTokensResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBigInt()
      )
    );
  }

  poolLength(): BigInt {
    let result = super.call("poolLength", "poolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolLength", "poolLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registeredToken(param0: BigInt): Address {
    let result = super.call(
      "registeredToken",
      "registeredToken(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_registeredToken(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "registeredToken",
      "registeredToken(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  startTimestamp(): BigInt {
    let result = super.call("startTimestamp", "startTimestamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startTimestamp",
      "startTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAllocPoint(): BigInt {
    let result = super.call(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAllocPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAllocPoint",
      "totalAllocPoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vtx(): Address {
    let result = super.call("vtx", "vtx():(address)", []);

    return result[0].toAddress();
  }

  try_vtx(): ethereum.CallResult<Address> {
    let result = super.tryCall("vtx", "vtx():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vtxPerSec(): BigInt {
    let result = super.call("vtxPerSec", "vtxPerSec():(uint256)", []);

    return result[0].toBigInt();
  }

  try_vtxPerSec(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vtxPerSec", "vtxPerSec():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class __MasterChefVTX_initCall extends ethereum.Call {
  get inputs(): __MasterChefVTX_initCall__Inputs {
    return new __MasterChefVTX_initCall__Inputs(this);
  }

  get outputs(): __MasterChefVTX_initCall__Outputs {
    return new __MasterChefVTX_initCall__Outputs(this);
  }
}

export class __MasterChefVTX_initCall__Inputs {
  _call: __MasterChefVTX_initCall;

  constructor(call: __MasterChefVTX_initCall) {
    this._call = call;
  }

  get _vtx(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vtxPerSec(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _startTimestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class __MasterChefVTX_initCall__Outputs {
  _call: __MasterChefVTX_initCall;

  constructor(call: __MasterChefVTX_initCall) {
    this._call = call;
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lpToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rewarder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _helper(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class AllowEmergencyCall extends ethereum.Call {
  get inputs(): AllowEmergencyCall__Inputs {
    return new AllowEmergencyCall__Inputs(this);
  }

  get outputs(): AllowEmergencyCall__Outputs {
    return new AllowEmergencyCall__Outputs(this);
  }
}

export class AllowEmergencyCall__Inputs {
  _call: AllowEmergencyCall;

  constructor(call: AllowEmergencyCall) {
    this._call = call;
  }
}

export class AllowEmergencyCall__Outputs {
  _call: AllowEmergencyCall;

  constructor(call: AllowEmergencyCall) {
    this._call = call;
  }
}

export class ClaimLockCall extends ethereum.Call {
  get inputs(): ClaimLockCall__Inputs {
    return new ClaimLockCall__Inputs(this);
  }

  get outputs(): ClaimLockCall__Outputs {
    return new ClaimLockCall__Outputs(this);
  }
}

export class ClaimLockCall__Inputs {
  _call: ClaimLockCall;

  constructor(call: ClaimLockCall) {
    this._call = call;
  }

  get _lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimLockCall__Outputs {
  _call: ClaimLockCall;

  constructor(call: ClaimLockCall) {
    this._call = call;
  }
}

export class CreateRewarderCall extends ethereum.Call {
  get inputs(): CreateRewarderCall__Inputs {
    return new CreateRewarderCall__Inputs(this);
  }

  get outputs(): CreateRewarderCall__Outputs {
    return new CreateRewarderCall__Outputs(this);
  }
}

export class CreateRewarderCall__Inputs {
  _call: CreateRewarderCall;

  constructor(call: CreateRewarderCall) {
    this._call = call;
  }

  get _lpToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get mainRewardToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CreateRewarderCall__Outputs {
  _call: CreateRewarderCall;

  constructor(call: CreateRewarderCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositForCall extends ethereum.Call {
  get inputs(): DepositForCall__Inputs {
    return new DepositForCall__Inputs(this);
  }

  get outputs(): DepositForCall__Outputs {
    return new DepositForCall__Outputs(this);
  }
}

export class DepositForCall__Inputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }

  get _lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sender(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositForCall__Outputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get _lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawWithRewardCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawWithRewardCall__Inputs {
    return new EmergencyWithdrawWithRewardCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawWithRewardCall__Outputs {
    return new EmergencyWithdrawWithRewardCall__Outputs(this);
  }
}

export class EmergencyWithdrawWithRewardCall__Inputs {
  _call: EmergencyWithdrawWithRewardCall;

  constructor(call: EmergencyWithdrawWithRewardCall) {
    this._call = call;
  }

  get _lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EmergencyWithdrawWithRewardCall__Outputs {
  _call: EmergencyWithdrawWithRewardCall;

  constructor(call: EmergencyWithdrawWithRewardCall) {
    this._call = call;
  }
}

export class LockCall extends ethereum.Call {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get _lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _index(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get force(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall extends ethereum.Call {
  get inputs(): MassUpdatePoolsCall__Inputs {
    return new MassUpdatePoolsCall__Inputs(this);
  }

  get outputs(): MassUpdatePoolsCall__Outputs {
    return new MassUpdatePoolsCall__Outputs(this);
  }
}

export class MassUpdatePoolsCall__Inputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall__Outputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class MultiUnlockCall extends ethereum.Call {
  get inputs(): MultiUnlockCall__Inputs {
    return new MultiUnlockCall__Inputs(this);
  }

  get outputs(): MultiUnlockCall__Outputs {
    return new MultiUnlockCall__Outputs(this);
  }
}

export class MultiUnlockCall__Inputs {
  _call: MultiUnlockCall;

  constructor(call: MultiUnlockCall) {
    this._call = call;
  }

  get _lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _index(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class MultiUnlockCall__Outputs {
  _call: MultiUnlockCall;

  constructor(call: MultiUnlockCall) {
    this._call = call;
  }
}

export class MulticlaimCall extends ethereum.Call {
  get inputs(): MulticlaimCall__Inputs {
    return new MulticlaimCall__Inputs(this);
  }

  get outputs(): MulticlaimCall__Outputs {
    return new MulticlaimCall__Outputs(this);
  }
}

export class MulticlaimCall__Inputs {
  _call: MulticlaimCall;

  constructor(call: MulticlaimCall) {
    this._call = call;
  }

  get _lps(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get user_address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MulticlaimCall__Outputs {
  _call: MulticlaimCall;

  constructor(call: MulticlaimCall) {
    this._call = call;
  }
}

export class RealEmergencyWithdrawCall extends ethereum.Call {
  get inputs(): RealEmergencyWithdrawCall__Inputs {
    return new RealEmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): RealEmergencyWithdrawCall__Outputs {
    return new RealEmergencyWithdrawCall__Outputs(this);
  }
}

export class RealEmergencyWithdrawCall__Inputs {
  _call: RealEmergencyWithdrawCall;

  constructor(call: RealEmergencyWithdrawCall) {
    this._call = call;
  }

  get _lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RealEmergencyWithdrawCall__Outputs {
  _call: RealEmergencyWithdrawCall;

  constructor(call: RealEmergencyWithdrawCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCall extends ethereum.Call {
  get inputs(): SetCall__Inputs {
    return new SetCall__Inputs(this);
  }

  get outputs(): SetCall__Outputs {
    return new SetCall__Outputs(this);
  }
}

export class SetCall__Inputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }

  get _lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _allocPoint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _rewarder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _locker(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get overwrite(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class SetCall__Outputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }
}

export class SetPoolManagerStatusCall extends ethereum.Call {
  get inputs(): SetPoolManagerStatusCall__Inputs {
    return new SetPoolManagerStatusCall__Inputs(this);
  }

  get outputs(): SetPoolManagerStatusCall__Outputs {
    return new SetPoolManagerStatusCall__Outputs(this);
  }
}

export class SetPoolManagerStatusCall__Inputs {
  _call: SetPoolManagerStatusCall;

  constructor(call: SetPoolManagerStatusCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bool(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetPoolManagerStatusCall__Outputs {
  _call: SetPoolManagerStatusCall;

  constructor(call: SetPoolManagerStatusCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }

  get _lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _index(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UpdateEmissionRateCall extends ethereum.Call {
  get inputs(): UpdateEmissionRateCall__Inputs {
    return new UpdateEmissionRateCall__Inputs(this);
  }

  get outputs(): UpdateEmissionRateCall__Outputs {
    return new UpdateEmissionRateCall__Outputs(this);
  }
}

export class UpdateEmissionRateCall__Inputs {
  _call: UpdateEmissionRateCall;

  constructor(call: UpdateEmissionRateCall) {
    this._call = call;
  }

  get _vtxPerSec(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateEmissionRateCall__Outputs {
  _call: UpdateEmissionRateCall;

  constructor(call: UpdateEmissionRateCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get _lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawForCall extends ethereum.Call {
  get inputs(): WithdrawForCall__Inputs {
    return new WithdrawForCall__Inputs(this);
  }

  get outputs(): WithdrawForCall__Outputs {
    return new WithdrawForCall__Outputs(this);
  }
}

export class WithdrawForCall__Inputs {
  _call: WithdrawForCall;

  constructor(call: WithdrawForCall) {
    this._call = call;
  }

  get _lp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _sender(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawForCall__Outputs {
  _call: WithdrawForCall;

  constructor(call: WithdrawForCall) {
    this._call = call;
  }
}
