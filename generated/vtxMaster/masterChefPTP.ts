// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Add extends ethereum.Event {
  get params(): Add__Params {
    return new Add__Params(this);
  }
}

export class Add__Params {
  _event: Add;

  constructor(event: Add) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get baseAllocPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lpToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get rewarder(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DepositFor extends ethereum.Event {
  get params(): DepositFor__Params {
    return new DepositFor__Params(this);
  }
}

export class DepositFor__Params {
  _event: DepositFor;

  constructor(event: DepositFor) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Set extends ethereum.Event {
  get params(): Set__Params {
    return new Set__Params(this);
  }
}

export class Set__Params {
  _event: Set;

  constructor(event: Set) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get baseAllocPoint(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewarder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get overwrite(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateEmissionRate extends ethereum.Event {
  get params(): UpdateEmissionRate__Params {
    return new UpdateEmissionRate__Params(this);
  }
}

export class UpdateEmissionRate__Params {
  _event: UpdateEmissionRate;

  constructor(event: UpdateEmissionRate) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ptpPerSec(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateEmissionRepartition extends ethereum.Event {
  get params(): UpdateEmissionRepartition__Params {
    return new UpdateEmissionRepartition__Params(this);
  }
}

export class UpdateEmissionRepartition__Params {
  _event: UpdateEmissionRepartition;

  constructor(event: UpdateEmissionRepartition) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dialutingRepartition(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nonDialutingRepartition(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdatePool extends ethereum.Event {
  get params(): UpdatePool__Params {
    return new UpdatePool__Params(this);
  }
}

export class UpdatePool__Params {
  _event: UpdatePool;

  constructor(event: UpdatePool) {
    this._event = event;
  }

  get pid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lastRewardTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lpSupply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get accPtpPerShare(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpdateVePTP extends ethereum.Event {
  get params(): UpdateVePTP__Params {
    return new UpdateVePTP__Params(this);
  }
}

export class UpdateVePTP__Params {
  _event: UpdateVePTP;

  constructor(event: UpdateVePTP) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldVePTP(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newVePTP(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class masterChefPTP__depositResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class masterChefPTP__multiClaimResult {
  value0: BigInt;
  value1: Array<BigInt>;
  value2: Array<BigInt>;

  constructor(value0: BigInt, value1: Array<BigInt>, value2: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    return map;
  }
}

export class masterChefPTP__pendingTokensResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: BigInt;

  constructor(value0: BigInt, value1: Address, value2: string, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class masterChefPTP__poolInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class masterChefPTP__rewarderBonusTokenInfoResult {
  value0: Address;
  value1: string;

  constructor(value0: Address, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }
}

export class masterChefPTP__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class masterChefPTP__withdrawResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class masterChefPTP extends ethereum.SmartContract {
  static bind(address: Address): masterChefPTP {
    return new masterChefPTP("masterChefPTP", address);
  }

  claimablePtp(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "claimablePtp",
      "claimablePtp(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimablePtp(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimablePtp",
      "claimablePtp(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit(_pid: BigInt, _amount: BigInt): masterChefPTP__depositResult {
    let result = super.call(
      "deposit",
      "deposit(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return new masterChefPTP__depositResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_deposit(
    _pid: BigInt,
    _amount: BigInt
  ): ethereum.CallResult<masterChefPTP__depositResult> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new masterChefPTP__depositResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  dialutingRepartition(): BigInt {
    let result = super.call(
      "dialutingRepartition",
      "dialutingRepartition():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_dialutingRepartition(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dialutingRepartition",
      "dialutingRepartition():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxPoolLength(): BigInt {
    let result = super.call("maxPoolLength", "maxPoolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxPoolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxPoolLength",
      "maxPoolLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  multiClaim(_pids: Array<BigInt>): masterChefPTP__multiClaimResult {
    let result = super.call(
      "multiClaim",
      "multiClaim(uint256[]):(uint256,uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(_pids)]
    );

    return new masterChefPTP__multiClaimResult(
      result[0].toBigInt(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray()
    );
  }

  try_multiClaim(
    _pids: Array<BigInt>
  ): ethereum.CallResult<masterChefPTP__multiClaimResult> {
    let result = super.tryCall(
      "multiClaim",
      "multiClaim(uint256[]):(uint256,uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(_pids)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new masterChefPTP__multiClaimResult(
        value[0].toBigInt(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray()
      )
    );
  }

  newMasterPlatypus(): Address {
    let result = super.call(
      "newMasterPlatypus",
      "newMasterPlatypus():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_newMasterPlatypus(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newMasterPlatypus",
      "newMasterPlatypus():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nonDialutingRepartition(): BigInt {
    let result = super.call(
      "nonDialutingRepartition",
      "nonDialutingRepartition():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nonDialutingRepartition(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nonDialutingRepartition",
      "nonDialutingRepartition():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerCandidate(): Address {
    let result = super.call("ownerCandidate", "ownerCandidate():(address)", []);

    return result[0].toAddress();
  }

  try_ownerCandidate(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ownerCandidate",
      "ownerCandidate():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingTokens(
    _pid: BigInt,
    _user: Address
  ): masterChefPTP__pendingTokensResult {
    let result = super.call(
      "pendingTokens",
      "pendingTokens(uint256,address):(uint256,address,string,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );

    return new masterChefPTP__pendingTokensResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toBigInt()
    );
  }

  try_pendingTokens(
    _pid: BigInt,
    _user: Address
  ): ethereum.CallResult<masterChefPTP__pendingTokensResult> {
    let result = super.tryCall(
      "pendingTokens",
      "pendingTokens(uint256,address):(uint256,address,string,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromAddress(_user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new masterChefPTP__pendingTokensResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toBigInt()
      )
    );
  }

  poolAdjustFactor(pid: BigInt): BigInt {
    let result = super.call(
      "poolAdjustFactor",
      "poolAdjustFactor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(pid)]
    );

    return result[0].toBigInt();
  }

  try_poolAdjustFactor(pid: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolAdjustFactor",
      "poolAdjustFactor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(pid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolInfo(param0: BigInt): masterChefPTP__poolInfoResult {
    let result = super.call(
      "poolInfo",
      "poolInfo(uint256):(address,uint256,uint256,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new masterChefPTP__poolInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_poolInfo(
    param0: BigInt
  ): ethereum.CallResult<masterChefPTP__poolInfoResult> {
    let result = super.tryCall(
      "poolInfo",
      "poolInfo(uint256):(address,uint256,uint256,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new masterChefPTP__poolInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  poolLength(): BigInt {
    let result = super.call("poolLength", "poolLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolLength", "poolLength():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ptp(): Address {
    let result = super.call("ptp", "ptp():(address)", []);

    return result[0].toAddress();
  }

  try_ptp(): ethereum.CallResult<Address> {
    let result = super.tryCall("ptp", "ptp():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ptpPerSec(): BigInt {
    let result = super.call("ptpPerSec", "ptpPerSec():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ptpPerSec(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ptpPerSec", "ptpPerSec():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewarderBonusTokenInfo(
    _pid: BigInt
  ): masterChefPTP__rewarderBonusTokenInfoResult {
    let result = super.call(
      "rewarderBonusTokenInfo",
      "rewarderBonusTokenInfo(uint256):(address,string)",
      [ethereum.Value.fromUnsignedBigInt(_pid)]
    );

    return new masterChefPTP__rewarderBonusTokenInfoResult(
      result[0].toAddress(),
      result[1].toString()
    );
  }

  try_rewarderBonusTokenInfo(
    _pid: BigInt
  ): ethereum.CallResult<masterChefPTP__rewarderBonusTokenInfoResult> {
    let result = super.tryCall(
      "rewarderBonusTokenInfo",
      "rewarderBonusTokenInfo(uint256):(address,string)",
      [ethereum.Value.fromUnsignedBigInt(_pid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new masterChefPTP__rewarderBonusTokenInfoResult(
        value[0].toAddress(),
        value[1].toString()
      )
    );
  }

  startTimestamp(): BigInt {
    let result = super.call("startTimestamp", "startTimestamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startTimestamp",
      "startTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAdjustedAllocPoint(): BigInt {
    let result = super.call(
      "totalAdjustedAllocPoint",
      "totalAdjustedAllocPoint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAdjustedAllocPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAdjustedAllocPoint",
      "totalAdjustedAllocPoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBaseAllocPoint(): BigInt {
    let result = super.call(
      "totalBaseAllocPoint",
      "totalBaseAllocPoint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalBaseAllocPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBaseAllocPoint",
      "totalBaseAllocPoint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userInfo(param0: BigInt, param1: Address): masterChefPTP__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new masterChefPTP__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_userInfo(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<masterChefPTP__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(uint256,address):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new masterChefPTP__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  vePtp(): Address {
    let result = super.call("vePtp", "vePtp():(address)", []);

    return result[0].toAddress();
  }

  try_vePtp(): ethereum.CallResult<Address> {
    let result = super.tryCall("vePtp", "vePtp():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(_pid: BigInt, _amount: BigInt): masterChefPTP__withdrawResult {
    let result = super.call(
      "withdraw",
      "withdraw(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return new masterChefPTP__withdrawResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_withdraw(
    _pid: BigInt,
    _amount: BigInt
  ): ethereum.CallResult<masterChefPTP__withdrawResult> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_pid),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new masterChefPTP__withdrawResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get _baseAllocPoint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lpToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rewarder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DepositForCall extends ethereum.Call {
  get inputs(): DepositForCall__Inputs {
    return new DepositForCall__Inputs(this);
  }

  get outputs(): DepositForCall__Outputs {
    return new DepositForCall__Outputs(this);
  }
}

export class DepositForCall__Inputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositForCall__Outputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }
}

export class EmergencyPtpWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyPtpWithdrawCall__Inputs {
    return new EmergencyPtpWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyPtpWithdrawCall__Outputs {
    return new EmergencyPtpWithdrawCall__Outputs(this);
  }
}

export class EmergencyPtpWithdrawCall__Inputs {
  _call: EmergencyPtpWithdrawCall;

  constructor(call: EmergencyPtpWithdrawCall) {
    this._call = call;
  }
}

export class EmergencyPtpWithdrawCall__Outputs {
  _call: EmergencyPtpWithdrawCall;

  constructor(call: EmergencyPtpWithdrawCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _ptp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vePtp(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ptpPerSec(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _dialutingRepartition(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _startTimestamp(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall extends ethereum.Call {
  get inputs(): MassUpdatePoolsCall__Inputs {
    return new MassUpdatePoolsCall__Inputs(this);
  }

  get outputs(): MassUpdatePoolsCall__Outputs {
    return new MassUpdatePoolsCall__Outputs(this);
  }
}

export class MassUpdatePoolsCall__Inputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class MassUpdatePoolsCall__Outputs {
  _call: MassUpdatePoolsCall;

  constructor(call: MassUpdatePoolsCall) {
    this._call = call;
  }
}

export class MigrateCall extends ethereum.Call {
  get inputs(): MigrateCall__Inputs {
    return new MigrateCall__Inputs(this);
  }

  get outputs(): MigrateCall__Outputs {
    return new MigrateCall__Outputs(this);
  }
}

export class MigrateCall__Inputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }

  get _pids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class MigrateCall__Outputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class MultiClaimCall extends ethereum.Call {
  get inputs(): MultiClaimCall__Inputs {
    return new MultiClaimCall__Inputs(this);
  }

  get outputs(): MultiClaimCall__Outputs {
    return new MultiClaimCall__Outputs(this);
  }
}

export class MultiClaimCall__Inputs {
  _call: MultiClaimCall;

  constructor(call: MultiClaimCall) {
    this._call = call;
  }

  get _pids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class MultiClaimCall__Outputs {
  _call: MultiClaimCall;

  constructor(call: MultiClaimCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }

  get value2(): Array<BigInt> {
    return this._call.outputValues[2].value.toBigIntArray();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class ProposeOwnerCall extends ethereum.Call {
  get inputs(): ProposeOwnerCall__Inputs {
    return new ProposeOwnerCall__Inputs(this);
  }

  get outputs(): ProposeOwnerCall__Outputs {
    return new ProposeOwnerCall__Outputs(this);
  }
}

export class ProposeOwnerCall__Inputs {
  _call: ProposeOwnerCall;

  constructor(call: ProposeOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ProposeOwnerCall__Outputs {
  _call: ProposeOwnerCall;

  constructor(call: ProposeOwnerCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCall extends ethereum.Call {
  get inputs(): SetCall__Inputs {
    return new SetCall__Inputs(this);
  }

  get outputs(): SetCall__Outputs {
    return new SetCall__Outputs(this);
  }
}

export class SetCall__Inputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _baseAllocPoint(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _rewarder(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get overwrite(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class SetCall__Outputs {
  _call: SetCall;

  constructor(call: SetCall) {
    this._call = call;
  }
}

export class SetMaxPoolLengthCall extends ethereum.Call {
  get inputs(): SetMaxPoolLengthCall__Inputs {
    return new SetMaxPoolLengthCall__Inputs(this);
  }

  get outputs(): SetMaxPoolLengthCall__Outputs {
    return new SetMaxPoolLengthCall__Outputs(this);
  }
}

export class SetMaxPoolLengthCall__Inputs {
  _call: SetMaxPoolLengthCall;

  constructor(call: SetMaxPoolLengthCall) {
    this._call = call;
  }

  get _maxPoolLength(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxPoolLengthCall__Outputs {
  _call: SetMaxPoolLengthCall;

  constructor(call: SetMaxPoolLengthCall) {
    this._call = call;
  }
}

export class SetNewMasterPlatypusCall extends ethereum.Call {
  get inputs(): SetNewMasterPlatypusCall__Inputs {
    return new SetNewMasterPlatypusCall__Inputs(this);
  }

  get outputs(): SetNewMasterPlatypusCall__Outputs {
    return new SetNewMasterPlatypusCall__Outputs(this);
  }
}

export class SetNewMasterPlatypusCall__Inputs {
  _call: SetNewMasterPlatypusCall;

  constructor(call: SetNewMasterPlatypusCall) {
    this._call = call;
  }

  get _newMasterPlatypus(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNewMasterPlatypusCall__Outputs {
  _call: SetNewMasterPlatypusCall;

  constructor(call: SetNewMasterPlatypusCall) {
    this._call = call;
  }
}

export class SetVePtpCall extends ethereum.Call {
  get inputs(): SetVePtpCall__Inputs {
    return new SetVePtpCall__Inputs(this);
  }

  get outputs(): SetVePtpCall__Outputs {
    return new SetVePtpCall__Outputs(this);
  }
}

export class SetVePtpCall__Inputs {
  _call: SetVePtpCall;

  constructor(call: SetVePtpCall) {
    this._call = call;
  }

  get _newVePtp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVePtpCall__Outputs {
  _call: SetVePtpCall;

  constructor(call: SetVePtpCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateEmissionRateCall extends ethereum.Call {
  get inputs(): UpdateEmissionRateCall__Inputs {
    return new UpdateEmissionRateCall__Inputs(this);
  }

  get outputs(): UpdateEmissionRateCall__Outputs {
    return new UpdateEmissionRateCall__Outputs(this);
  }
}

export class UpdateEmissionRateCall__Inputs {
  _call: UpdateEmissionRateCall;

  constructor(call: UpdateEmissionRateCall) {
    this._call = call;
  }

  get _ptpPerSec(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateEmissionRateCall__Outputs {
  _call: UpdateEmissionRateCall;

  constructor(call: UpdateEmissionRateCall) {
    this._call = call;
  }
}

export class UpdateEmissionRepartitionCall extends ethereum.Call {
  get inputs(): UpdateEmissionRepartitionCall__Inputs {
    return new UpdateEmissionRepartitionCall__Inputs(this);
  }

  get outputs(): UpdateEmissionRepartitionCall__Outputs {
    return new UpdateEmissionRepartitionCall__Outputs(this);
  }
}

export class UpdateEmissionRepartitionCall__Inputs {
  _call: UpdateEmissionRepartitionCall;

  constructor(call: UpdateEmissionRepartitionCall) {
    this._call = call;
  }

  get _dialutingRepartition(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateEmissionRepartitionCall__Outputs {
  _call: UpdateEmissionRepartitionCall;

  constructor(call: UpdateEmissionRepartitionCall) {
    this._call = call;
  }
}

export class UpdateFactorCall extends ethereum.Call {
  get inputs(): UpdateFactorCall__Inputs {
    return new UpdateFactorCall__Inputs(this);
  }

  get outputs(): UpdateFactorCall__Outputs {
    return new UpdateFactorCall__Outputs(this);
  }
}

export class UpdateFactorCall__Inputs {
  _call: UpdateFactorCall;

  constructor(call: UpdateFactorCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newVePtpBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateFactorCall__Outputs {
  _call: UpdateFactorCall;

  constructor(call: UpdateFactorCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}
